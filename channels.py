#–õ–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤
import time
from parser import parse_channel_page, extract_post_data
from telegram_sender import send_to_telegram
from config import channels, KEYWORDS
from filters import is_post_relevant 

last_post_ids = {}

def initialize_channels():
    print("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    for ch in channels:
        post_html = parse_channel_page(ch)
        if post_html:
            post = extract_post_data(post_html, ch)
            last_post_ids[ch] = post['id']
            print(f"üîí @{ch}: –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç ID {post['id']}")
        else:
            last_post_ids[ch] = None
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –∏–∑ @{ch}")

def monitor_channels():
    print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤...")
    while True:
        for ch in channels:
            try:
                post_html = parse_channel_page(ch)
                if not post_html:
                    continue

                post = extract_post_data(post_html, ch)
                if post['id'] != last_post_ids.get(ch):
                    if is_post_relevant(post['text'], KEYWORDS):  # üîç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–¥–µ—Å—å
                        print(f"üì® @{ch}: –Ω–æ–≤—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–æ—Å—Ç ID {post['id']}")
                        send_to_telegram(post)
                    else:
                        print(f"‚õî @{ch}: –ø–æ—Å—Ç ID {post['id']} –Ω–µ –ø—Ä–æ—à—ë–ª —Ñ–∏–ª—å—Ç—Ä")
                    last_post_ids[ch] = post['id']
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ @{ch}: {e}")
        time.sleep(1)